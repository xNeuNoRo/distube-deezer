{"version":3,"sources":["../src/index.ts","../src/API.ts"],"sourcesContent":["import { getAlbum, getPlaylist, getTrack } from \"./API\";\nimport { CustomPlugin, DisTubeError, Playlist, Song, checkInvalidKey } from \"distube\";\nimport type { VoiceBasedChannel } from \"discord.js\";\nimport type { PlayOptions, PlaylistInfo, Queue } from \"distube\";\nimport bluebird from \"bluebird\";\n\nconst SUPPORTED_TYPES = [\"album\", \"playlist\", \"track\"];\n\nconst REGEX = /^https?:\\/\\/(?:www\\.)?deezer\\.com\\/(?:[a-z]{2}\\/)?(track|album|playlist)\\/(\\d+)\\/?(?:\\?.*?)?$/;\n\ntype Falsy = undefined | null | false | 0 | \"\";\nconst isTruthy = <T>(x: T | Falsy): x is T => Boolean(x);\n\ndeclare type DeezerPluginOptions = {\n  parallel?: boolean;\n  emitEventsAfterFetching?: boolean;\n  maxPlaylistTrack?: number;\n  songsPerRequest?: number;\n  requestDelay?: number;\n};\n\nexport class DeezerPlugin extends CustomPlugin {\n  parallel: boolean;\n  emitEventsAfterFetching: boolean;\n  maxPlaylistTrack: number;\n  songsPerRequest: number;\n  requestDelay: number;\n  constructor(options: DeezerPluginOptions = {}) {\n    super();\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"object\", \"undefined\"], options, \"DeezerPluginOptions\");\n    }\n    checkInvalidKey(\n      options, \n      [\n        \"parallel\",\n        \"emitEventsAfterFetching\",\n        \"maxPlaylistTrack\", \n        \"songsPerRequest\", \n        \"requestDelay\"\n      ], \n      \"DeezerPluginOptions\"\n    );\n    this.parallel = options.parallel ?? true;\n    if (typeof this.parallel !== \"boolean\") {\n      throw new DisTubeError(\"INVALID_TYPE\", \"boolean\", this.parallel, \"DeezerPluginOptions.parallel\");\n    }\n    this.emitEventsAfterFetching = options.emitEventsAfterFetching ?? false;\n    if (typeof this.emitEventsAfterFetching !== \"boolean\") {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"boolean\",\n        this.emitEventsAfterFetching,\n        \"DeezerPluginOptions.emitEventsAfterFetching\",\n      );\n    }\n    this.maxPlaylistTrack = options.maxPlaylistTrack ?? 200;\n    if (typeof this.maxPlaylistTrack !== \"number\") {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"number\",\n        this.maxPlaylistTrack,\n        \"DeezerPluginOptions.maxPlaylistTrack\"\n        );\n    } else if (this.maxPlaylistTrack <= 0) {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"more than 0\",\n        this.maxPlaylistTrack,\n        \"DeezerPluginOptions.maxPlaylistTrack\"\n        );\n    } else if (this.maxPlaylistTrack >= 10000) {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"less than 10000\",\n        this.maxPlaylistTrack,\n        \"DeezerPluginOptions.maxPlaylistTrack\"\n        );\n    }\n    this.songsPerRequest = options.songsPerRequest ?? 10;\n    if (typeof this.songsPerRequest !== \"number\") {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"number\",\n        this.songsPerRequest,\n        \"DeezerPluginOptions.songsPerRequest\"\n      );\n    } else if (this.songsPerRequest <= 0) {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"more than 0\",\n        this.songsPerRequest,\n        \"DeezerPluginOptions.songsPerRequest\"\n      );\n    }\n    this.requestDelay = options.requestDelay ?? 1000;\n    if (typeof this.requestDelay !== \"number\") {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"number\",\n        this.requestDelay,\n        \"DeezerPluginOptions.requestDelay\"\n      );\n    } else if (this.requestDelay <= 100) {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"more than 100ms\",\n        this.requestDelay,\n        \"DeezerPluginOptions.requestDelay\"\n      );\n    }\n  }\n\n  parseURL(url: string): { type?: string; id?: string } {\n    const [, type, id] = url.match(REGEX) ?? [];\n    return { type, id };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async validate(url: string) {\n    if (typeof url !== \"string\" || !url.includes(\"deezer\")) return false;\n    const { type, id } = this.parseURL(url);\n    if (!type || !id || !SUPPORTED_TYPES.includes(type)) return false;\n    return true;\n  }\n\n  async play(voiceChannel: VoiceBasedChannel, url: string, options: PlayOptions) {\n    const DT = this.distube;\n    const { member, textChannel, skip, position, metadata } = Object.assign({ position: 0 }, options);\n    const { type, id } = this.parseURL(url);\n    if (!type || !id) {\n      throw new DisTubeError(\"DEEZER_PLUGIN_INVALID_URL\", `Invalid Deezer url: ${url}`);\n    }\n    const api = type === \"track\" ? getTrack(id) : type === \"album\" ? getAlbum(id) : getPlaylist(id);\n    const data = await api.catch(e => {\n      throw new DisTubeError(\"DEEZER_PLUGIN_API_ERROR\", e.message);\n    });\n    if (!data.type || !SUPPORTED_TYPES.includes(data.type)) {\n      throw new DisTubeError(\"DEEZER_PLUGIN_NOT_SUPPORTED\", \"This deezer link is not supported.\");\n    }\n    if (data.type === \"track\") {\n      const query = `${data.title} ${data.contributors.map((a: any) => a.name).join(\" \")}`;\n      const result = await this.search(query, metadata);\n      if (!result) throw new DisTubeError(\"DEEZER_PLUGIN_NO_RESULT\", `Cannot find \"${query}\" on YouTube.`);\n      result.member = member;\n      await DT.play(voiceChannel, result, options);\n    } else {\n      const name = data.title;\n      const thumbnail =\n        data.type == \"album\"\n          ? data.cover_xl || data.cover_big || data.cover_medium || data.cover\n          : data.picture_xl || data.picture_big || data.picture_medium || data.picture;\n      const queries: string[] = data.tracks.data\n       .slice(0, this.maxPlaylistTrack)\n       .map((t: any) => `${t.title} ${t.artist.name}`);\n      const url = data.link;\n      let firstSong: Song | undefined;\n      const getFirstSong = async () => {\n        const firstQuery = queries.shift();\n        if (!firstQuery) return;\n        const result = await this.search(firstQuery, metadata);\n        if (!result) return;\n        result.member = member;\n        firstSong = result;\n      };\n      while (!firstSong) {\n        await getFirstSong();\n      }\n\n      if (!firstSong) {\n        throw new DisTubeError(\"DEEZER_PLUGIN_NO_RESULT\", `Cannot find any tracks of \"${name}\" on YouTube.`);\n      }\n      const queue = DT.getQueue(voiceChannel);\n\n      const playlistInfo: PlaylistInfo = {\n        source: \"deezer\",\n        songs: [firstSong],\n        name,\n        thumbnail,\n        member,\n        url,\n      };\n      const playlist = new Playlist(playlistInfo, { member, metadata });\n      let newQueueCreated;\n      const fetchTheRest = async (q: Queue, fs: Song) => {\n        if (queries.length) {\n          const results: (Song | null)[] = [];\n          const query_success = new Set();\n          if (this.parallel) {\n            //results = await Promise.all(queries.map(query => this.search(query, metadata)));\n            interface CacheItem {\n              url_result?: any;\n              initial_index?: any;\n            }\n\n            const cache: CacheItem[] = [];\n            const batchResults: any[] = [];\n            const tmp_songs = new Set();\n            const unique_urls = new Set();\n            let batchCounter = 0;\n            let totalProcessed = 0;\n            //let initialTime = new Date();\n\n            // NEW METHOD\n            await bluebird.map(queries, async (query: any, index: any) => {\n              const search_result = await this.search(query, metadata);\n              totalProcessed++;\n              if (!search_result) return bluebird.delay(this.requestDelay);\n              results.push(search_result);\n              batchResults.push(search_result);\n              tmp_songs.add(search_result.url);\n              query_success.add(search_result.url);\n              batchCounter++;\n\n              if (batchCounter === this.songsPerRequest || totalProcessed === queries.length) {\n                batchCounter = 0;\n\n                const songsToAdd = batchResults\n                 .filter(x => isTruthy(x) && tmp_songs.has(x.url))\n                 .filter(song => {\n                  if (unique_urls.has(song.url)) {\n                    return false;\n                  } else {\n                    unique_urls.add(song.url);\n                    return true;\n                  }\n                })\n                 .map(r => {\n                  const s = new Song(r, { member, metadata });\n                  s.playlist = playlist;\n                  return s;\n                });\n\n                const queue_check = DT.getQueue(voiceChannel);\n                if (queue_check) await q.addToQueue(songsToAdd, !skip && position > 0 ? position + 1 : position);\n                else q = await DT.queues.create(voiceChannel, songsToAdd, textChannel) as Queue, newQueueCreated = q;\n\n                batchResults.splice(0, batchResults.length);\n                tmp_songs.clear();\n              }\n\n              cache.push({ url_result: search_result.url, initial_index: index });\n              return bluebird.delay(this.requestDelay);\n            }, { concurrency: this.songsPerRequest });\n\n            results.sort((a: any, b: any) => {\n              const indexA = cache.findIndex(item => item.url_result === a.url);\n              const indexB = cache.findIndex(item => item.url_result === b.url);\n              return cache[indexA].initial_index - cache[indexB].initial_index;\n            });\n          } else {\n            for (let i = 0; i < queries.length; i++) {\n              results[i] = await this.search(queries[i], metadata);\n            }\n          }\n\n          playlist.songs = results.filter(isTruthy).map(s => {\n            s.member = member;\n            s.playlist = playlist;\n            return s;\n          });\n\n          const queue_check = DT.getQueue(voiceChannel);\n          if (queue_check) {\n            q.songs.sort((a: any, b: any) => \n             playlist.songs.findIndex((ps: any) => ps.url === a.url) - \n             playlist.songs.findIndex((ps: any) => ps.url === b.url)\n            );\n\n            if (playlist.songs.filter((s: any) => !query_success.has(s.url)).length) {\n              q.addToQueue(\n                playlist.songs.filter((s: any) => \n                 !query_success.has(s.url)), !skip && position > 0 ? position + 1 : position\n                );\n            }\n          } else {\n            q = await DT.queues.create(voiceChannel, playlist.songs, textChannel) as Queue, \n            newQueueCreated = q;\n          }\n        }\n        playlist.songs.unshift(fs);\n      };\n      if (queue) {\n        queue.addToQueue(firstSong, position);\n        if (skip) queue.skip();\n        else if (!this.emitEventsAfterFetching) DT.emit(\"addList\", queue, playlist);\n        await fetchTheRest(queue, firstSong);\n        if (!skip && this.emitEventsAfterFetching) DT.emit(\"addList\", queue, playlist);\n        if (newQueueCreated) DT.emit(\"playSong\", newQueueCreated, playlist.songs[1]);\n      } else {\n        let newQueue = await DT.queues.create(voiceChannel, firstSong, textChannel);\n        while (newQueue === true) {\n          await getFirstSong();\n          newQueue = await DT.queues.create(voiceChannel, firstSong, textChannel);\n        }\n        DT.emit(\"playSong\", newQueue, firstSong);\n        if (!this.emitEventsAfterFetching) {\n          if (DT.options.emitAddListWhenCreatingQueue) DT.emit(\"addList\", newQueue, playlist);\n          //DT.emit(\"playSong\", newQueue, firstSong);\n          if (newQueueCreated) DT.emit(\"playSong\", newQueueCreated, playlist.songs[1]);\n        }\n        await fetchTheRest(newQueue, firstSong);\n        if (this.emitEventsAfterFetching) {\n          if (DT.options.emitAddListWhenCreatingQueue) DT.emit(\"addList\", newQueue, playlist);\n          //DT.emit(\"playSong\", newQueue, firstSong);\n          if (newQueueCreated) DT.emit(\"playSong\", newQueueCreated, playlist.songs[1]);\n        }\n      }\n    }\n  }\n\n  async search(query: string, metadata: any) {\n    try {\n      return new Song((await this.distube.search(query, { limit: 1 }))[0], { metadata });\n    } catch {\n      return null;\n    }\n  }\n}\n\nexport default DeezerPlugin;\n","import { Pool } from \"undici\";\nimport type { AlbumResponse, PlaylistResponse, TrackResponse } from \"./type\";\n\nconst api = new Pool(\"https://api.deezer.com\");\n\nconst get = async (path: string): Promise<any> => {\n  const { body } = await api.request({\n    path,\n    method: \"GET\",\n  });\n\n  const data: any = await body.json();\n  if (data.error) throw new Error(data.error?.message);\n  return data;\n};\n\nexport const getTrack = async (id: string): Promise<TrackResponse> => get(`/track/${id}`);\n\nexport const getAlbum = async (id: string): Promise<AlbumResponse> => get(`/album/${id}`);\n\nexport const getPlaylist = async (id: string): Promise<PlaylistResponse> => get(`/playlist/${id}`);\n"],"mappings":"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","names":["api","url","bluebird","queue_check"]}